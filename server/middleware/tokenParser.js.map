{"version":3,"sources":["../../middleware/tokenParser.js"],"names":["req","res","next","token","headers","verify","err","decoded","status","json","message","_id","id","userExists","userId"],"mappings":";;;;;;AAKA;;;;AACA;;AACA;;;;2cAPA;;;;;;;kBASe,UAACA,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,MAAMC,QAAQH,IAAII,OAAJ,CAAY,eAAZ,CAAd;AACA,yBAAIC,MAAJ,CAAWF,KAAX;AAAA,uEAA8B,iBAAOG,GAAP,EAAYC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACxBD,GADwB;AAAA;AAAA;AAAA;;AAE1BL,kBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,cAAV,EAArB;AAF0B;AAAA;;AAAA;AAAA;AAAA,qBAKD,oCAAkB,EAAEC,KAAKJ,QAAQK,EAAf,EAAlB,CALC;;AAAA;AAKpBC,wBALoB;;AAM1B,kBAAGA,UAAH,EAAc;AACZb,oBAAIc,MAAJ,GAAaP,QAAQK,EAArB;AACAV;AACD,eAHD,MAII;AACFD,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,cAAV,EAArB;AACD;;AAZyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B;;AAAA;AAAA;AAAA;AAAA;AAeD,C","file":"tokenParser.js","sourcesContent":["/**\r\n * @fileoverview tokenParser is a middleware that extracts token bearer from the headers of a request. \r\n * The token is parsed and piped to the next callback.\r\n * @exports tokenParser\r\n */\r\nimport JWT from 'jsonwebtoken';\r\nimport { SERVER_KEY } from '../api/auth';\r\nimport { checkIfUserExists } from '../service/userService';\r\n\r\nexport default (req, res, next) => {\r\n  const token = req.headers['authorization'];\r\n  JWT.verify(token, SERVER_KEY, async (err, decoded) => {\r\n    if (err) {\r\n      res.status(400).json({message: 'Invalid User'});\r\n    }\r\n    else {\r\n      const userExists = await checkIfUserExists({ _id: decoded.id });\r\n      if(userExists){\r\n        req.userId = decoded.id;\r\n        next();\r\n      }\r\n      else{\r\n        res.status(400).json({message: 'Invalid User'});\r\n      }\r\n    }\r\n  });\r\n};"]}