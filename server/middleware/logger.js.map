{"version":3,"sources":["../../middleware/logger.js"],"names":["combine","timestamp","label","printf","myFormat","info","level","message","format","transports","File","filename"],"mappings":";;;;;;AAIA;;IAEQA,O,mBAAAA,O;IAASC,S,mBAAAA,S;IAAWC,K,mBAAAA,K;IAAOC,M,mBAAAA,M;;AAEnC;;;AARA;;;;;AAWA,IAAMC,WAAWD,OAAO;AAAA,kBACpBE,KAAKJ,SADe,UACDI,KAAKH,KADJ,UACcG,KAAKC,KADnB,UAC6BD,KAAKE,OADlC;AAAA,CAAP,CAAjB;;AAIA;;;;;kBAKe,2BAAa;AAC1BC,UAAQR,QACNE,MAAM,EAAEA,OAAO,aAAT,EAAN,CADM,EAEND,WAFM,EAGNG,QAHM,CADkB;AAM1BK,cAAY,CACV,IAAI,oBAAWC,IAAf,CAAoB,EAACC,UAAU,UAAX,EAApB,CADU;AANc,CAAb,C","file":"logger.js","sourcesContent":["/**\r\n * @fileoverview Logger Utility monitors and logs all output to info.log\r\n * for debugging and app control\r\n */\r\nimport { createLogger, format, transports } from 'winston';\r\n\r\nconst { combine, timestamp, label, printf } = format;\r\n\r\n/**\r\n * @constant {string} Format - This is the format fo logs piped into info.log\r\n */\r\nconst myFormat = printf(info => `\r\n  ${info.timestamp} [${info.label}] ${info.level}: ${info.message}\r\n`);\r\n\r\n/**\r\n * @description\r\n * Export the logger object to log outputs to `${info.log}\r\n * @exports Logger.createLogger\r\n */\r\nexport default createLogger({\r\n  format: combine(\r\n    label({ label: 'Log to File' }),\r\n    timestamp(),\r\n    myFormat\r\n  ),\r\n  transports: [\r\n    new transports.File({filename: 'info.log'})\r\n  ]\r\n});"]}