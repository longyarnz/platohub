{"version":3,"sources":["../../middleware/validateItem.js"],"names":["req","res","next","name","body","undefined","status","json","message"],"mappings":";;;;;;AAAA;;;;kBAIe,UAACA,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC;;;AADiC,MAIzBC,IAJyB,GAIhBH,IAAII,IAJY,CAIzBD,IAJyB;;AAMjC;;;;AAGA,MAAIA,SAAS,IAAT,IAAiBA,SAASE,SAA9B,EAAyC;AACvCJ,QAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,kBAAX,EAArB;AACD;;AAED;;;AAJA,OAOK,IAAI,OAAOL,IAAP,KAAgB,QAApB,EAA8B;AACjCF,UAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,kBAAX,EAArB;AACD,KAFI,MAIA;AACHN;AACD;AACF,C","file":"validateItem.js","sourcesContent":["/**\r\n * @fileoverview validateInput is a middleware that validates the username and password fields in the request object.\r\n * @exports validateItem\r\n */\r\nexport default (req, res, next) => {\r\n  /**\r\n   * @description Destructures and extracts username and password from Request object\r\n   */\r\n  const { name } = req.body;\r\n\r\n  /**\r\n   * @description Tests for data input\r\n   */\r\n  if (name === null || name === undefined) {\r\n    res.status(401).json({ message: 'Invalid Inputs 1' });\r\n  }\r\n\r\n  /**\r\n   * @description Tests for data validity\r\n   */\r\n  else if (typeof name !== 'string') {\r\n    res.status(401).json({ message: 'Invalid Inputs 2' });\r\n  }\r\n\r\n  else {\r\n    next();\r\n  }\r\n};"]}