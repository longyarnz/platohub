{"version":3,"sources":["../../api/user.js"],"names":["router","Router","get","req","res","userId","user","status","json","put","friend","params","wallet","delete"],"mappings":";;;;;;AAIA;;;;AACA;;;;AACA;;;;2cANA;;;;;;AASA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEA;;;;;AAKAD,OAAOE,GAAP,CAAW,UAAX;AAAA,qEAAoC,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAExBC,kBAFwB,GAEbF,GAFa,CAExBE,MAFwB;AAAA;AAAA,mBAGb,iCAAeA,MAAf,CAHa;;AAAA;AAG1BC,gBAH0B;;AAIhCF,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;AAJgC;AAAA;;AAAA;AAAA;AAAA;;AAOhCF,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0CAArB;;AAPgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA;;AAWA;;;;;AAKAR,OAAOS,GAAP,CAAW,kBAAX;AAAA,sEAA4C,kBAAON,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAExBM,kBAFwB,GAEHP,GAFG,CAElCQ,MAFkC,CAExBD,MAFwB,EAEdL,MAFc,GAEHF,GAFG,CAEdE,MAFc;AAAA;AAAA,mBAGnB,6BAAWA,MAAX,EAAmBK,MAAnB,CAHmB;;AAAA;AAGlCE,kBAHkC;;AAIxCR,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,MAArB;AAJwC;AAAA;;AAAA;AAAA;AAAA;;AAOxCR,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0CAArB;;AAPwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5C;;AAAA;AAAA;AAAA;AAAA;;AAWA;;;;;AAKAR,OAAOa,MAAP,CAAc,kBAAd;AAAA,sEAA+C,kBAAOV,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE3BM,kBAF2B,GAENP,GAFM,CAErCQ,MAFqC,CAE3BD,MAF2B,EAEjBL,MAFiB,GAENF,GAFM,CAEjBE,MAFiB;AAAA;AAAA,mBAGtB,gCAAcA,MAAd,EAAsBK,MAAtB,CAHsB;;AAAA;AAGrCE,kBAHqC;;AAI3CR,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,MAArB;AAJ2C;AAAA;;AAAA;AAAA;AAAA;;AAO3CR,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,0CAArB;;AAP2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/C;;AAAA;AAAA;AAAA;AAAA;;kBAWeR,M","file":"user.js","sourcesContent":["/**\r\n * @fileoverview Wallet Routes and API endpoints.\r\n * @exports router\r\n */\r\nimport express from 'express';\r\nimport tokenParser from '../middleware/tokenParser';\r\nimport { \r\n  getUserFriends, addFriends, removeFriends\r\n} from '../service/userService';\r\nconst router = express.Router();\r\n\r\n/**\r\n * @description Gets all user wallets\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {Response} JSON\r\n */\r\nrouter.get('/friends', tokenParser, async (req, res) => {\r\n  try {\r\n    const { userId } = req;\r\n    const user = await getUserFriends(userId);\r\n    res.status(200).json(user);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to get user wallets');\r\n  }\r\n});\r\n\r\n/**\r\n * @description Gets all user wallets\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {Response} JSON\r\n */\r\nrouter.put('/friends/:friend', tokenParser, async (req, res) => {\r\n  try {\r\n    let { params: { friend }, userId } = req;\r\n    const wallet = await addFriends(userId, friend);\r\n    res.status(200).json(wallet);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to get user wallets');\r\n  }\r\n});\r\n\r\n/**\r\n * @description Gets all user wallets\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {Response} JSON\r\n */\r\nrouter.delete('/friends/:friend', tokenParser, async (req, res) => {\r\n  try {\r\n    let { params: { friend }, userId } = req;\r\n    const wallet = await removeFriends(userId, friend);\r\n    res.status(200).json(wallet);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to get user wallets');\r\n  }\r\n});\r\n\r\nexport default router;"]}