{"version":3,"sources":["../../api/wallet.js"],"names":["router","Router","get","req","res","userId","wallet","status","json","post","label","params","walletId","_id","put","body","delete","removed","type","balance","accountId"],"mappings":"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","file":"wallet.js","sourcesContent":["/**\r\n * @fileoverview Wallet Routes and API endpoints.\r\n * @exports router\r\n */\r\nimport express from 'express';\r\nimport tokenParser from '../middleware/tokenParser';\r\nimport { \r\n  getUserWallets, createWallet, createWalletAccount, deleteWalletById, updateWalletById, getAWalletWhere, getAccountBalance\r\n} from '../service/walletService';\r\nconst router = express.Router();\r\n\r\n/**\r\n * @description Gets all user wallets\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {Response} JSON\r\n */\r\nrouter.get('/', tokenParser, async (req, res) => {\r\n  try {\r\n    const { userId } = req;\r\n    const wallet = await getUserWallets(userId);\r\n    res.status(200).json(wallet);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to get user wallets');\r\n  }\r\n});\r\n\r\n/**\r\n * @description Creates a single wallet\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A newly created wallet object\r\n */\r\nrouter.post('/:label', tokenParser, async (req, res) => {\r\n  try {\r\n    const { params: { label }, userId } = req;\r\n    const wallet = await createWallet(userId, label);\r\n    res.status(200).json(wallet);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to create a user wallet');\r\n  }\r\n});\r\n\r\n/**\r\n * @description Gets a single user wallet\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A wallet object\r\n */\r\nrouter.get('/:walletId', tokenParser, async (req, res) => {\r\n  try {\r\n    const {params: { walletId }} = req;\r\n    const wallet = await getAWalletWhere({ _id: walletId });\r\n    res.status(200).json(wallet);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to get user wallet');\r\n  }\r\n});\r\n\r\n/**\r\n * @description Updates a single user wallet\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A wallet object\r\n */\r\nrouter.put('/:walletId', tokenParser, async (req, res) => {\r\n  try {\r\n    const {body, params: { walletId }} = req;\r\n    const wallet = await updateWalletById(walletId, body);\r\n    res.status(200).json(wallet);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to update user wallet');\r\n  }\r\n});\r\n\r\n/**\r\n * @description Deletes a single user wallet\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A wallet object\r\n */\r\nrouter.delete('/:walletId', tokenParser, async (req, res) => {\r\n  try {\r\n    const { params: { walletId } } = req;\r\n    const removed = await deleteWalletById(walletId);\r\n    res.status(200).json(removed);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to delete user wallet');\r\n  }\r\n});\r\n\r\n/**\r\n * @description Fetch Wallet Balance\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A wallet object\r\n */\r\nrouter.post('/:walletId/account/:type', tokenParser, async (req, res) => {\r\n  try {\r\n    const {params: { walletId, type }} = req;\r\n    const balance = await createWalletAccount(walletId, type);\r\n    res.status(200).json(balance);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json(err);\r\n  }\r\n});\r\n\r\n/**\r\n * @description Fetch Wallet Balance\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A wallet object\r\n */\r\nrouter.get('/:walletId/:accountId/balance', tokenParser, async (req, res) => {\r\n  try {\r\n    const {params: { walletId, accountId }} = req;\r\n    const balance = await getAccountBalance(walletId, accountId);\r\n    res.status(200).json(balance);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json(err);\r\n  }\r\n});\r\n\r\nexport default router;"]}