{"version":3,"sources":["../../api/transaction.js"],"names":["router","Router","get","req","res","userId","transaction","status","json","post","body","amount","accountId","type","walletId","transactionId","params","_id","delete","removed"],"mappings":";;;;;;AAIA;;;;AACA;;;;AACA;;;;2cANA;;;;;;AASA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEA;;;;;AAKAD,OAAOE,GAAP,CAAW,GAAX;AAAA,qEAA6B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjBC,kBAFiB,GAENF,GAFM,CAEjBE,MAFiB;AAAA;AAAA,mBAGC,6CAAoBA,MAApB,CAHD;;AAAA;AAGnBC,uBAHmB;;AAIzBF,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,WAArB;AAJyB;AAAA;;AAAA;AAAA;AAAA;;AAOzBF,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+CAArB;;AAPyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;;AAWA;;;;;AAKAR,OAAOS,IAAP,CAAY,GAAZ;AAAA,sEAA8B,kBAAON,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAE8BD,GAF9B,CAElBO,IAFkB,EAEVC,MAFU,aAEVA,MAFU,EAEFC,SAFE,aAEFA,SAFE,EAESC,IAFT,aAESA,IAFT,EAEeC,QAFf,aAEeA,QAFf;AAAA;AAAA,mBAGA,2CAAkBD,IAAlB,EAAwBF,MAAxB,EAAgCC,SAAhC,EAA2CE,QAA3C,CAHA;;AAAA;AAGpBR,uBAHoB;;AAI1BF,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,WAArB;AAJ0B;AAAA;;AAAA;AAAA;AAAA;;AAO1BF,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mDAArB;;AAP0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;;AAAA;AAAA;AAAA;AAAA;;AAWA;;;;;AAKAR,OAAOE,GAAP,CAAW,iBAAX;AAAA,sEAA2C,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtBW,yBAFsB,GAEHZ,GAFG,CAEhCa,MAFgC,CAEtBD,aAFsB;AAAA;AAAA,mBAGb,8CAAqB,EAAEE,KAAKF,aAAP,EAArB,CAHa;;AAAA;AAGjCT,uBAHiC;;AAIvCF,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,WAArB;AAJuC;AAAA;;AAAA;AAAA;AAAA;;AAOvCF,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8CAArB;;AAPuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3C;;AAAA;AAAA;AAAA;AAAA;;AAWA;;;;;AAKAR,OAAOkB,MAAP,CAAc,iBAAd;AAAA,sEAA8C,kBAAOf,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAExBW,yBAFwB,GAEJZ,GAFI,CAElCa,MAFkC,CAExBD,aAFwB;AAAA;AAAA,mBAGpB,+CAAsBA,aAAtB,CAHoB;;AAAA;AAGpCI,mBAHoC;;AAI1Cf,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,OAArB;AAJ0C;AAAA;;AAAA;AAAA;AAAA;;AAO1Cf,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iDAArB;;AAP0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA;;kBAWeR,M","file":"transaction.js","sourcesContent":["/**\r\n * @fileoverview Transaction Routes and API endpoints.\r\n * @exports router\r\n */\r\nimport express from 'express';\r\nimport tokenParser from '../middleware/tokenParser';\r\nimport { \r\n  getUserTransactions, createTransaction, deleteTransactionById, getATransactionWhere\r\n} from '../service/transactionService';\r\nconst router = express.Router();\r\n\r\n/**\r\n * @description Gets all user transactions\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {Response} JSON\r\n */\r\nrouter.get('/', tokenParser, async (req, res) => {\r\n  try {\r\n    const { userId } = req;\r\n    const transaction = await getUserTransactions(userId);\r\n    res.status(200).json(transaction);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to get user transactions');\r\n  }\r\n});\r\n\r\n/**\r\n * @description Creates a single transaction\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A newly created transaction object\r\n */\r\nrouter.post('/', tokenParser, async (req, res) => {\r\n  try {\r\n    const { body: { amount, accountId, type, walletId } } = req;\r\n    const transaction = await createTransaction(type, amount, accountId, walletId);\r\n    res.status(200).json(transaction);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to create a user transaction');\r\n  }\r\n});\r\n\r\n/**\r\n * @description Gets a single user transaction\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A transaction object\r\n */\r\nrouter.get('/:transactionId', tokenParser, async (req, res) => {\r\n  try {\r\n    const {params: { transactionId }} = req;\r\n    const transaction = await getATransactionWhere({ _id: transactionId });\r\n    res.status(200).json(transaction);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to get user transaction');\r\n  }\r\n});\r\n\r\n/**\r\n * @description Deletes a single user transaction\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A transaction object\r\n */\r\nrouter.delete('/:transactionId', tokenParser, async (req, res) => {\r\n  try {\r\n    const { params: { transactionId } } = req;\r\n    const removed = await deleteTransactionById(transactionId);\r\n    res.status(200).json(removed);\r\n  }\r\n  catch (err) {\r\n    res.status(400).json('NetworkError: Unable to delete user transaction');\r\n  }\r\n});\r\n\r\nexport default router;"]}