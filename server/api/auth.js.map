{"version":3,"sources":["../../api/auth.js"],"names":["router","Router","SERVER_KEY","post","req","res","body","email","password","user","isCreated","redirect","status","json","isValid","sign","id","err","token","message","text","get","v4","header"],"mappings":";;;;;;;AAIA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;2cAVA;;;;;;AAYA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;AACA,IAAIC,aAAa,sCAAjB;;AAEA;;;;;;AAMAF,OAAOG,IAAP,CAAY,SAAZ;AAAA,qEAAsC,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEND,IAAIE,IAFE,EAE1BC,KAF0B,aAE1BA,KAF0B,EAEnBC,QAFmB,aAEnBA,QAFmB;AAAA;AAAA,mBAGf,6BAAW,EAAED,YAAF,EAASC,kBAAT,EAAX,CAHe;;AAAA;AAG5BC,gBAH4B;;;AAKlC,gBAAIA,KAAKC,SAAT,EAAoB;AAClBL,kBAAIM,QAAJ,CAAa,GAAb,EAAkB,aAAlB;AACD,aAFD,MAIK;AACHN,kBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAArB;AACD;AAXiC;AAAA;;AAAA;AAAA;AAAA;;AAclCR,gBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AAdkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;;AAkBA;;;;;;AAMAb,OAAOG,IAAP,CAAY,QAAZ;AAAA,sEAAqC,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACPD,IAAIE,IADG,EAC3BC,KAD2B,cAC3BA,KAD2B,EACpBC,QADoB,cACpBA,QADoB;AAAA;AAAA;AAAA,mBAId,mCAAiB,EAAED,YAAF,EAASC,kBAAT,EAAjB,CAJc;;AAAA;AAI3BC,gBAJ2B;;;AAMjC,gBAAIA,KAAKK,OAAT,EAAkB;AAChB;;;AAGA,qCAAIC,IAAJ,CAAS,EAAEC,IAAIP,KAAKO,EAAX,EAAT,EAA0Bd,UAA1B,EAAsC,UAACe,GAAD,EAAMC,KAAN,EAAgB;AACpD,oBAAID,GAAJ,EAASZ,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iCAArB;;AAET,oBAAMM,UAAU;AACdC,wBAAM,wBADQ;AAEdF;AAFc,iBAAhB;;AAKA;;;AAGAb,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,OAArB;AACD,eAZD;AAaD,aAjBD,MAmBK;AACGA,qBADH,GACa;AACdC,sBAAM,mCADQ;AAEdF,uBAAO;AAFO,eADb;;;AAMHb,kBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,OAArB;AACD;AAhCgC;AAAA;;AAAA;AAAA;AAAA;;AAoCjCd,gBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,aAAIM,OAAzB;;AApCiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAwCA;;;;;AAKAnB,OAAOqB,GAAP,CAAW,SAAX,yBAAmC,UAACjB,GAAD,EAAMC,GAAN,EAAc;AAC/C,UAKOH,UALP,gBAAa,eAAKoB,EAAL,EAAb;AACAjB,MAAIkB,MAAJ,CAAW,eAAX,IAA8B,EAA9B;AACAlB,MAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,IAArB;AACD,CAJD;;QAMSX,U,GAAAA,U;kBAEMF,M","file":"auth.js","sourcesContent":["/**\r\n * @fileoverview Authentication Route for server connection.\r\n * @exports router\r\n */\r\nimport express from 'express';\r\nimport 'babel-polyfill';\r\nimport JWT from 'jsonwebtoken';\r\nimport UUID from 'uuid';\r\nimport { authenticateUser, createUser } from '../service/userService';\r\nimport validateInput from '../middleware/validateInput';\r\nimport tokenParser from '../middleware/tokenParser';\r\n\r\nconst router = express.Router();\r\nlet SERVER_KEY = '641116d9-02db-4b03-a60e-4052d24906eb';\r\n\r\n/**\r\n * @description Registers a user into the Server\r\n * @param {string} route An API route to login\r\n * @param {middleware} validateInput - Callback for post method to routes\r\n * @returns {Response} JSON\r\n */\r\nrouter.post('/create', validateInput, async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const user = await createUser({ email, password });\r\n\r\n    if (user.isCreated) {\r\n      res.redirect(307, '/auth/login');\r\n    }\r\n\r\n    else {\r\n      res.status(400).json('Error: User Already Exists');\r\n    }\r\n  }\r\n  catch (err) {\r\n    res.status(400).json(err);\r\n  }\r\n});\r\n\r\n/**\r\n * @description Logs a user into the Server\r\n * @param {string} route An API route to login\r\n * @param {middleware} validateInput - Callback for post method to routes\r\n * @returns {Response} JSON\r\n */\r\nrouter.post('/login', validateInput, async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const user = await authenticateUser({ email, password });\r\n\r\n    if (user.isValid) {\r\n      /**\r\n       * @description Creates JWT token from the email and password\r\n       */\r\n      JWT.sign({ id: user.id }, SERVER_KEY, (err, token) => {\r\n        if (err) res.status(400).json('Server is currently unavailable');\r\n\r\n        const message = {\r\n          text: 'User log-in successful',\r\n          token\r\n        };\r\n\r\n        /**\r\n         * @description Returns user token\r\n         */\r\n        res.status(200).json(message);\r\n      });\r\n    }\r\n\r\n    else {\r\n      const message = {\r\n        text: 'Email and password does not match',\r\n        token: false\r\n      };\r\n\r\n      res.status(200).json(message);\r\n    }\r\n  }\r\n\r\n  catch (err) {\r\n    res.status(400).json(err.message);\r\n  }\r\n});\r\n\r\n/**\r\n * @description Log a user out of the Server\r\n * @param {string} route An API route to login\r\n * @returns {Response} JSON\r\n */\r\nrouter.get('/logout', tokenParser, (req, res) => {\r\n  SERVER_KEY = UUID.v4();\r\n  res.header['authorization'] = '';\r\n  res.status(200).json(true);\r\n});\r\n\r\nexport { SERVER_KEY };\r\n\r\nexport default router;"]}