{"version":3,"sources":["../../service/userService.js"],"names":["HASH","parseInt","process","env","authenticateUser","credentials","email","password","findOne","select","user","compareSync","status","isValid","id","_id","error","createUser","checkIfUserExists","hashSync","create","isCreated","query","getUserEmail","userId"],"mappings":"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","file":"userService.js","sourcesContent":["/**\r\n * @fileoverview Methods for querying data from the users collection.\r\n * @exports { createUser, authenticateUser, checkIfUserExists, getUserEmail }\r\n */\r\nimport bcrypt from 'bcrypt';\r\nimport UserModel from '../models/user';\r\nimport logger from '../middleware/logger';\r\n\r\nconst HASH = parseInt(process.env.HASH);\r\n\r\n/**\r\n * @description Authenticates a user given an email and a password\r\n * @param {object} credentials - email and password object\r\n * @return {object} isValid and id\r\n */\r\nconst authenticateUser = async (credentials) => {\r\n  try {\r\n    let { email, password } = credentials;\r\n    const user = await UserModel.findOne({ email }).select('password');\r\n    if(user !== null && user.password) {\r\n      const status = await bcrypt.compareSync(password, user.password);\r\n      return status ? { isValid: true, id: user._id } : { isValid: false, id: null };\r\n    }\r\n    else{\r\n      return { isValid: false, id: null };\r\n    }\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\n/**\r\n * @description Creates a user given a email and a password\r\n * @param {object} credentials - email and password object\r\n * @return {object} isValid and id\r\n */\r\nconst createUser = async (credentials) => {\r\n  try {\r\n    let { email, password } = credentials;\r\n    const status = await checkIfUserExists({ email });\r\n    if(status) throw('User Already Exists');\r\n    password = await bcrypt.hashSync(password, HASH);\r\n    const user = await UserModel.create({ email, password });\r\n    return typeof user === 'object' ? { isCreated: true, id: user._id } : { isCreated: false, id: null };\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst checkIfUserExists = async (query) => {\r\n  try{\r\n    const user = await UserModel.findOne(query);\r\n    return user === null ? false : true;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst getUserEmail =  async (userId) => {\r\n  try{\r\n    const { email } = await UserModel.findOne({_id: userId}).select('email');\r\n    return email;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nexport { createUser, authenticateUser, checkIfUserExists, getUserEmail };"]}