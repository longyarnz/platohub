{"version":3,"sources":["../../service/transactionService.js"],"names":["createTransaction","type","amount","accountId","walletId","balance","account","create","wallet","transaction","Error","error","getATransactionWhere","query","findOne","getUserTransactions","created_by","find","transactions","deleteTransactionById","transactionId","deleteOne","_id","remove","ok"],"mappings":";;;;;;;AAIA;;AACA;;;;AACA;;;;;;2cANA;;;;;;AAQA,IAAMA;AAAA,qEAAoB,iBAAOC,IAAP,EAAaC,MAAb,EAAqBC,SAArB,EAAgCC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEA,4CAAwBA,QAAxB,EAAkCD,SAAlC,EAA6C,EAAEE,SAASH,MAAX,EAA7C,CAFA;;AAAA;AAEhBI,mBAFgB;;AAAA,kBAGnBA,QAAQD,OAAR,KAAoBH,MAHD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIM,sBAAiBK,MAAjB,CAAwB,EAAEN,UAAF,EAAQC,cAAR,EAAgBI,SAASH,SAAzB,EAAoCK,QAAQJ,QAA5C,EAAxB,CAJN;;AAAA;AAIdK,uBAJc;AAAA,6CAKbA,WALa;;AAAA;AAAA,kBAQd,IAAIC,KAAJ,CAAU,0CAAV,CARc;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAYtB,6BAAOC,KAAP;AAZsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAiBA,IAAMC;AAAA,sEAAuB,kBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEC,sBAAiBC,OAAjB,CAAyBD,KAAzB,CAFD;;AAAA;AAEnBJ,uBAFmB;AAAA,8CAGlBA,WAHkB;;AAAA;AAAA;AAAA;;AAMzB,6BAAOE,KAAP;AANyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAWA,IAAMI;AAAA,sEAAsB,kBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEG,sBAAiBC,IAAjB,CAAsB,EAAED,sBAAF,EAAtB,CAFH;;AAAA;AAElBE,wBAFkB;AAAA,8CAGjBA,YAHiB;;AAAA;AAAA;AAAA;;AAMxB,6BAAOP,KAAP;AANwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAWA,IAAMQ;AAAA,sEAAwB,kBAAOC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEL,sBAAiBC,SAAjB,CAA2B,EAAEC,KAAKF,aAAP,EAA3B,CAFK;;AAAA;AAEpBG,kBAFoB;AAAA,8CAGnBA,OAAOC,EAAP,KAAc,CAHK;;AAAA;AAAA;AAAA;;AAM1B,6BAAOb,KAAP;AAN0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA,GAAN;;QAWSX,iB,GAAAA,iB;QAAmBY,oB,GAAAA,oB;QAAsBG,mB,GAAAA,mB;QAAqBI,qB,GAAAA,qB","file":"transactionService.js","sourcesContent":["/**\r\n * @fileoverview Methods for querying data from the transactions collection.\r\n * @exports { createTransaction, getATransactionWhere, getUserTransactions, deleteTransactionById }\r\n */\r\nimport { updateWalletAccountById } from './walletService';\r\nimport TransactionModel from '../models/transaction';\r\nimport logger from '../middleware/logger';\r\n\r\nconst createTransaction = async (type, amount, accountId, walletId) => {\r\n  try {\r\n    const account = await updateWalletAccountById(walletId, accountId, { balance: amount });\r\n    if(account.balance === amount) {\r\n      const transaction = await TransactionModel.create({ type, amount, account: accountId, wallet: walletId });\r\n      return transaction;\r\n    }\r\n    else{\r\n      throw new Error('Network Error: Transaction not completed');\r\n    }\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst getATransactionWhere = async (query) => {\r\n  try {\r\n    const transaction = await TransactionModel.findOne(query);\r\n    return transaction;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst getUserTransactions = async (created_by) => {\r\n  try {\r\n    const transactions = await TransactionModel.find({ created_by });\r\n    return transactions;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst deleteTransactionById = async (transactionId) => {\r\n  try {\r\n    const remove = await TransactionModel.deleteOne({ _id: transactionId });\r\n    return remove.ok === 1;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nexport { createTransaction, getATransactionWhere, getUserTransactions, deleteTransactionById };"]}