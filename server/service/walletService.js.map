{"version":3,"sources":["../../service/walletService.js"],"names":["createWallet","userId","label","create","created_by","wallet","error","createWalletAccount","walletId","type","update","$push","accounts","updateWalletById","new","account","length","getAWalletWhere","query","findOne","getUserWallets","find","wallets","findOneAndUpdate","_id","deleteWalletById","deleteOne","remove","ok","getAnAccountWhere","accountId","Error","getAccountBalance","balance","updateWalletAccountById","$set","sort","a","b","date_created","deleteWalletAccountById","$pull","some","toString"],"mappings":"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","file":"walletService.js","sourcesContent":["/**\r\n * @fileoverview Methods for querying data from the wallets collection.\r\n * @exports { createWallet, getAWalletWhere, getUserWallets, deleteWalletById, updateWalletById, getAnAccountWhere, getAccountBalance, updateWalletAccountById, deleteWalletAccountById }\r\n */\r\nimport WalletModel from '../models/wallet';\r\nimport logger from '../middleware/logger';\r\n\r\nconst createWallet = async (userId, label) => {\r\n  try {\r\n    const wallet = await WalletModel.create({ created_by: userId, label });\r\n    return wallet;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst createWalletAccount = async (walletId, type) => {\r\n  try {\r\n    const update = { $push: { accounts: { type } } };\r\n    const wallet = await updateWalletById(walletId, update, {new: true});\r\n    const account = wallet.accounts[wallet.accounts.length - 1];\r\n    return account;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n}\r\n\r\nconst getAWalletWhere = async (query) => {\r\n  try {\r\n    const wallet = await WalletModel.findOne(query);\r\n    return wallet;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst getUserWallets = async (created_by) => {\r\n  try {\r\n    const wallets = await WalletModel.find({ created_by });\r\n    return wallets;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst updateWalletById = async (walletId, update) => {\r\n  try {\r\n    const wallet = await WalletModel.findOneAndUpdate({ _id: walletId }, update, { new: true });\r\n    return wallet;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst deleteWalletById = async (walletId) => {\r\n  try {\r\n    const remove = await WalletModel.deleteOne({ _id: walletId });\r\n    return remove.ok === 1;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst getAnAccountWhere = async (walletId, accountId) => {\r\n  try {\r\n    const wallet = await getAWalletWhere({_id: walletId});\r\n    const account = wallet.accounts.find(account => account._id === accountId);\r\n    if(account) {\r\n      return account;\r\n    }\r\n    else{\r\n      throw new Error('Account does not exist');\r\n    }\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst getAccountBalance = async (walletId, accountId) => {\r\n  try {\r\n    const account = getAnAccountWhere(walletId, accountId);\r\n    return account.balance;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst updateWalletAccountById = async (walletId, accountId, update) => {\r\n  try {\r\n    const wallet = await WalletModel.findOneAndUpdate({ _id: walletId, 'accounts._id': accountId }, {\r\n      $set: { 'accounts.$': update }\r\n    }, {new: true});\r\n    return wallet.accounts.sort((a, b) => b.date_created - a.date_created)[0];\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst deleteWalletAccountById = async (walletId, accountId) => {\r\n  try {\r\n    const wallet = await WalletModel.findOneAndUpdate({_id: walletId}, {$pull: {accounts: {_id: accountId}}}, {new: true});\r\n    return !wallet.accounts.some(account => account._id.toString() === accountId);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nexport { createWallet, createWalletAccount, getAWalletWhere, getUserWallets, deleteWalletById, updateWalletById, getAnAccountWhere, getAccountBalance, updateWalletAccountById, deleteWalletAccountById };"]}